import React from 'react';\nimport { Check } from 'lucide-react';\nimport Button from '../ui/Button';\n\n/**\n * Componente QueryTypeSelector mejorado siguiendo el design system\n * Proporciona una interfaz clara para seleccionar entre diferentes tipos de consulta\n */\nconst QueryTypeSelector = ({ \n  selectedType, \n  onSelect, \n  options = [],\n  layout = 'grid', // 'grid' | 'list'\n  showFeatures = true,\n  className = ''\n}) => {\n  \n  const defaultOptions = [\n    {\n      id: 'simple',\n      title: 'Consulta Sencilla',\n      description: 'Búsqueda rápida utilizando únicamente el número de radicado.',\n      icon: 'Search',\n      complexity: 'Básica',\n      estimatedTime: '2-3 min',\n      features: [\n        'Búsqueda por número de radicado',\n        'Configuración de frecuencia de notificación',\n        'Notificaciones por correo electrónico'\n      ]\n    },\n    {\n      id: 'advanced',\n      title: 'Consulta Avanzada',\n      description: 'Búsqueda detallada con múltiples criterios de filtrado.',\n      icon: 'Filter',\n      complexity: 'Avanzada',\n      estimatedTime: '5-8 min',\n      features: [\n        'Búsqueda por número de radicado o nombre/razón social',\n        'Filtros por departamento, ciudad y especialidad',\n        'Opciones avanzadas de configuración',\n        'Notificaciones personalizadas'\n      ]\n    }\n  ];\n\n  const queryOptions = options.length > 0 ? options : defaultOptions;\n  \n  const layoutClasses = {\n    grid: 'grid grid-cols-1 md:grid-cols-2 gap-lg',\n    list: 'space-y-md'\n  };\n\n  const handleSelect = (optionId) => {\n    onSelect(optionId);\n  };\n\n  return (\n    <div className={`query-type-selector ${className}`}>\n      <div className={layoutClasses[layout]}>\n        {queryOptions.map((option) => {\n          const isSelected = selectedType === option.id;\n          \n          return (\n            <div \n              key={option.id}\n              className={`\n                relative bg-bg-canvas rounded-lg border-2 p-lg cursor-pointer \n                transition-default hover:shadow-md\n                ${\n                  isSelected \n                    ? 'border-interactive-default bg-yellow-50' \n                    : 'border-border-default hover:border-interactive-hover'\n                }\n              `}\n              onClick={() => handleSelect(option.id)}\n            >\n              {/* Selection Indicator */}\n              {isSelected && (\n                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-interactive-default rounded-full flex items-center justify-center\">\n                  <Check size={14} className=\"text-text-primary\" />\n                </div>\n              )}\n\n              {/* Card Header */}\n              <div className=\"flex items-start justify-between mb-md\">\n                <div className=\"flex items-center gap-sm\">\n                  {/* Icon */}\n                  {option.icon && (\n                    <div className={`\n                      w-12 h-12 rounded-lg flex items-center justify-center\n                      ${\n                        isSelected \n                          ? 'bg-interactive-default text-text-primary' \n                          : 'bg-bg-light text-interactive-default'\n                      }\n                    `}>\n                      {/* Aquí podrías renderizar el icono dinámicamente */}\n                      <div className=\"w-6 h-6 bg-current rounded\" style={{maskImage: 'url(#search-icon)'}} />\n                    </div>\n                  )}\n                  \n                  <div>\n                    <h3 className=\"text-heading-h3 font-heading text-text-primary mb-xs\">\n                      {option.title}\n                    </h3>\n                    \n                    {/* Metadata */}\n                    {(option.complexity || option.estimatedTime) && (\n                      <div className=\"flex items-center gap-md text-body-auxiliary text-text-secondary\">\n                        {option.complexity && (\n                          <span className=\"flex items-center gap-xs\">\n                            <div className={`w-2 h-2 rounded-full ${\n                              option.complexity === 'Básica' \n                                ? 'bg-feedback-success' \n                                : 'bg-feedback-warning'\n                            }`}></div>\n                            {option.complexity}\n                          </span>\n                        )}\n                        \n                        {option.complexity && option.estimatedTime && (\n                          <span>•</span>\n                        )}\n                        \n                        {option.estimatedTime && (\n                          <span>{option.estimatedTime}</span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Description */}\n              <p className=\"text-body-paragraph text-text-base mb-md leading-relaxed\">\n                {option.description}\n              </p>\n\n              {/* Features List */}\n              {showFeatures && option.features && option.features.length > 0 && (\n                <div className=\"space-y-sm mb-lg\">\n                  <h4 className=\"text-heading-h4 font-heading text-text-primary mb-sm\">\n                    Incluye:\n                  </h4>\n                  <div className=\"space-y-xs\">\n                    {option.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-start gap-sm\">\n                        <Check size={16} className=\"text-interactive-default mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-body-paragraph text-text-base\">\n                          {feature}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Best For */}\n              {option.bestFor && (\n                <div className=\"bg-bg-light rounded-md p-sm mb-md\">\n                  <p className=\"text-body-auxiliary text-text-secondary\">\n                    <span className=\"font-medium text-text-primary\">Ideal para:</span> {option.bestFor}\n                  </p>\n                </div>\n              )}\n\n              {/* Select Button */}\n              <Button\n                variant={isSelected ? 'primary' : 'secondary'}\n                size=\"md\"\n                className=\"w-full\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleSelect(option.id);\n                }}\n              >\n                {isSelected ? 'Seleccionado' : 'Seleccionar'}\n              </Button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default QueryTypeSelector;