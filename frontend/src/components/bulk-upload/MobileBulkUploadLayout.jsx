import React from 'react';\nimport { cn } from '../../utils/cn';\nimport { useMobileDetection, useMobileScroll } from '../../hooks/useMobileDetection';\n\n/**\n * Layout optimizado para dispositivos móviles en el flujo de bulk upload\n * Maneja automáticamente el spacing, scroll y layout responsivo\n */\nconst MobileBulkUploadLayout = ({ children, className = '', ...props }) => {\n  const { isMobile, isTablet, screenSize, orientation } = useMobileDetection();\n  const { scrollDirection, isScrolling } = useMobileScroll();\n\n  return (\n    <div \n      className={cn(\n        'min-h-screen bg-bg-light',\n        // Ajustes específicos para móvil\n        isMobile && [\n          'pb-safe-area-inset-bottom', // Espacio para notch en iOS\n        ],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n/**\n * Header adaptativo para móvil\n */\nconst MobileHeader = ({ \n  onBack, \n  title, \n  subtitle, \n  breadcrumb,\n  className = '',\n  ...props \n}) => {\n  const { isMobile, isTablet } = useMobileDetection();\n  const { scrollDirection, isScrolling, scrollPosition } = useMobileScroll();\n\n  // Header que se oculta al hacer scroll down en móvil\n  const shouldHideHeader = isMobile && scrollDirection === 'down' && scrollPosition > 100 && isScrolling;\n\n  return (\n    <header \n      className={cn(\n        'bg-bg-canvas border-b border-border-default transition-transform duration-300 ease-out',\n        // Comportamiento de auto-hide en móvil\n        isMobile && [\n          'sticky top-0 z-40',\n          shouldHideHeader && '-translate-y-full'\n        ],\n        // Padding adaptativo\n        isMobile ? 'px-md py-sm' : 'px-md md:px-lg py-md',\n        className\n      )}\n      {...props}\n    >\n      <div className={cn(\n        'container mx-auto',\n        isMobile ? 'max-w-none px-0' : 'px-0'\n      )}>\n        {/* Botón de back y breadcrumb */}\n        <div className=\"space-y-sm\">\n          {onBack && (\n            <button\n              onClick={onBack}\n              className={cn(\n                'flex items-center gap-sm text-text-secondary hover:text-text-primary transition-colors',\n                'touch-target p-xs -m-xs rounded-md',\n                isMobile ? 'text-body-auxiliary' : 'text-body-paragraph'\n              )}\n              aria-label=\"Volver\"\n            >\n              <svg \n                width={isMobile ? 16 : 20} \n                height={isMobile ? 16 : 20} \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M19 12H5M12 19l-7-7 7-7\" />\n              </svg>\n              <span className={isMobile ? 'hidden' : 'inline'}>Volver</span>\n            </button>\n          )}\n          \n          {/* Breadcrumb */}\n          {breadcrumb && (\n            <nav \n              className={cn(\n                'flex items-center text-text-secondary overflow-x-auto',\n                isMobile ? 'text-body-auxiliary' : 'text-body-auxiliary'\n              )}\n              aria-label=\"Breadcrumb\"\n            >\n              {breadcrumb}\n            </nav>\n          )}\n        </div>\n\n        {/* Título y subtítulo */}\n        {(title || subtitle) && (\n          <div className={cn(\n            'mt-sm',\n            !isMobile && 'mt-md'\n          )}>\n            {title && (\n              <h1 className={cn(\n                'font-heading text-text-primary',\n                isMobile ? 'text-heading-h3' : 'text-heading-h1'\n              )}>\n                {title}\n              </h1>\n            )}\n            {subtitle && (\n              <p className={cn(\n                'text-text-secondary mt-xs',\n                isMobile ? 'text-body-auxiliary' : 'text-body-paragraph'\n              )}>\n                {subtitle}\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n    </header>\n  );\n};\n\n/**\n * Container principal con layout adaptativo\n */\nconst MobileMainContainer = ({ \n  children, \n  maxWidth = '6xl',\n  className = '',\n  ...props \n}) => {\n  const { isMobile, isTablet } = useMobileDetection();\n\n  const maxWidthClasses = {\n    '4xl': 'max-w-4xl',\n    '5xl': 'max-w-5xl', \n    '6xl': 'max-w-6xl',\n    '7xl': 'max-w-7xl',\n    'full': 'max-w-full'\n  };\n\n  return (\n    <main \n      className={cn(\n        'container mx-auto',\n        // Padding adaptativo\n        isMobile ? 'px-md py-lg' : 'px-md md:px-lg py-xl',\n        // Max width\n        !isMobile && maxWidthClasses[maxWidth],\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </main>\n  );\n};\n\n/**\n * Grid responsivo para contenido lateral + principal\n */\nconst MobileResponsiveGrid = ({ \n  sidebar, \n  main, \n  sidebarSize = '1',\n  mainSize = '2',\n  className = '',\n  ...props \n}) => {\n  const { isMobile, isTablet } = useMobileDetection();\n\n  if (isMobile) {\n    // En móvil, stack vertical con sidebar primero\n    return (\n      <div className={cn('space-y-lg', className)} {...props}>\n        {sidebar && (\n          <div className=\"order-1\">\n            {sidebar}\n          </div>\n        )}\n        {main && (\n          <div className=\"order-2\">\n            {main}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // En tablet/desktop, usar grid\n  const gridCols = sidebarSize === '1' && mainSize === '2' \n    ? 'lg:grid-cols-3' \n    : 'lg:grid-cols-2';\n\n  const sidebarCol = sidebarSize === '1' ? 'lg:col-span-1' : 'lg:col-span-2';\n  const mainCol = mainSize === '2' ? 'lg:col-span-2' : 'lg:col-span-1';\n\n  return (\n    <div \n      className={cn(\n        'grid grid-cols-1 gap-xl',\n        gridCols,\n        className\n      )} \n      {...props}\n    >\n      {sidebar && (\n        <div className={cn(sidebarCol, 'space-y-lg')}>\n          {sidebar}\n        </div>\n      )}\n      {main && (\n        <div className={cn(mainCol, 'space-y-xl')}>\n          {main}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Card adaptativo para móvil\n */\nconst MobileCard = ({ \n  children, \n  size = 'md',\n  variant = 'default',\n  className = '',\n  ...props \n}) => {\n  const { isMobile } = useMobileDetection();\n\n  const sizeClasses = {\n    sm: isMobile ? 'p-sm' : 'p-md',\n    md: isMobile ? 'p-md' : 'p-lg', \n    lg: isMobile ? 'p-lg' : 'p-xl',\n    xl: isMobile ? 'p-xl' : 'p-2xl'\n  };\n\n  const variantClasses = {\n    default: 'bg-bg-canvas border border-border-default',\n    outlined: 'bg-bg-canvas border-2 border-border-default',\n    elevated: 'bg-bg-canvas border border-border-default shadow-md',\n    info: 'bg-feedback-info-light border border-feedback-info',\n    success: 'bg-feedback-success-light border border-feedback-success',\n    warning: 'bg-feedback-warning-light border border-feedback-warning',\n    error: 'bg-feedback-error-light border border-feedback-error'\n  };\n\n  return (\n    <div \n      className={cn(\n        'rounded-lg transition-default',\n        sizeClasses[size],\n        variantClasses[variant],\n        isMobile && 'mx-0', // Sin margin en móvil\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\n/**\n * Botones adaptados para móvil\n */\nconst MobileButtonGroup = ({ \n  children, \n  orientation = 'horizontal',\n  className = '',\n  ...props \n}) => {\n  const { isMobile } = useMobileDetection();\n\n  // En móvil, siempre vertical. En desktop, respetar orientación\n  const actualOrientation = isMobile ? 'vertical' : orientation;\n\n  return (\n    <div \n      className={cn(\n        'flex gap-sm',\n        actualOrientation === 'vertical' ? 'flex-col' : 'flex-col sm:flex-row sm:justify-center',\n        isMobile && 'w-full',\n        className\n      )}\n      {...props}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type.displayName?.includes('Button')) {\n          return React.cloneElement(child, {\n            className: cn(\n              child.props.className,\n              isMobile && 'w-full'\n            )\n          });\n        }\n        return child;\n      })}\n    </div>\n  );\n};\n\n// Asignar subcomponentes\nMobileBulkUploadLayout.Header = MobileHeader;\nMobileBulkUploadLayout.Main = MobileMainContainer;\nMobileBulkUploadLayout.Grid = MobileResponsiveGrid;\nMobileBulkUploadLayout.Card = MobileCard;\nMobileBulkUploadLayout.ButtonGroup = MobileButtonGroup;\n\nexport default MobileBulkUploadLayout;