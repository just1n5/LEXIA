import React, { useState, useEffect, useRef } from 'react';\nimport { cn } from '../../utils/cn';\n\n/**\n * Sistema de micro-interacciones premium para feedback visual rico\n * Incluye animaciones fluidas, efectos visuales y feedback háptico\n */\n\n/**\n * Hook para animaciones de entrada escalonadas\n */\nexport const useStaggeredAnimation = (items = [], delay = 100) => {\n  const [visibleItems, setVisibleItems] = useState([]);\n\n  useEffect(() => {\n    if (items.length === 0) {\n      setVisibleItems([]);\n      return;\n    }\n\n    setVisibleItems([]);\n    \n    items.forEach((_, index) => {\n      setTimeout(() => {\n        setVisibleItems(prev => [...prev, index]);\n      }, index * delay);\n    });\n  }, [items, delay]);\n\n  return visibleItems;\n};\n\n/**\n * Hook para efectos de reveal al hacer scroll\n */\nexport const useScrollReveal = (threshold = 0.1) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          observer.disconnect(); // Solo animar una vez\n        }\n      },\n      { threshold }\n    );\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => observer.disconnect();\n  }, [threshold]);\n\n  return [ref, isVisible];\n};\n\n/**\n * Componente de botón con efectos de ripple y micro-interacciones\n */\nexport const InteractiveButton = React.forwardRef(({ \n  children,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  loading = false,\n  onClick,\n  hapticFeedback = true,\n  rippleEffect = true,\n  glowEffect = false,\n  className = '',\n  ...props\n}, ref) => {\n  const [ripples, setRipples] = useState([]);\n  const [isPressed, setIsPressed] = useState(false);\n  const buttonRef = useRef(null);\n\n  const createRipple = (event) => {\n    if (!rippleEffect || disabled) return;\n\n    const button = buttonRef.current;\n    const rect = button.getBoundingClientRect();\n    const size = Math.max(rect.width, rect.height);\n    const x = event.clientX - rect.left - size / 2;\n    const y = event.clientY - rect.top - size / 2;\n\n    const newRipple = {\n      id: Date.now(),\n      x,\n      y,\n      size\n    };\n\n    setRipples(prev => [...prev, newRipple]);\n\n    // Limpiar ripple después de la animación\n    setTimeout(() => {\n      setRipples(prev => prev.filter(ripple => ripple.id !== newRipple.id));\n    }, 600);\n  };\n\n  const handleClick = (event) => {\n    if (disabled || loading) return;\n\n    // Feedback háptico\n    if (hapticFeedback && navigator.vibrate) {\n      navigator.vibrate(50);\n    }\n\n    // Crear efecto ripple\n    createRipple(event);\n\n    // Ejecutar callback\n    onClick?.(event);\n  };\n\n  const handleMouseDown = () => setIsPressed(true);\n  const handleMouseUp = () => setIsPressed(false);\n  const handleMouseLeave = () => setIsPressed(false);\n\n  return (\n    <button\n      ref={(el) => {\n        buttonRef.current = el;\n        if (ref) {\n          if (typeof ref === 'function') ref(el);\n          else ref.current = el;\n        }\n      }}\n      className={cn(\n        // Estilos base\n        'relative inline-flex items-center justify-center',\n        'font-medium transition-all duration-200 ease-out',\n        'border-none rounded-md overflow-hidden',\n        'focus:outline-none focus:ring-2 focus:ring-interactive-default focus:ring-opacity-50',\n        \n        // Variantes\n        {\n          'bg-interactive-default text-text-base hover:bg-interactive-hover active:bg-interactive-active': variant === 'primary',\n          'bg-bg-canvas border border-border-default text-text-base hover:bg-bg-light hover:border-interactive-default': variant === 'secondary',\n          'bg-transparent text-text-base hover:bg-bg-light': variant === 'ghost',\n          'bg-feedback-error text-bg-canvas hover:bg-red-600': variant === 'destructive'\n        },\n        \n        // Tamaños\n        {\n          'px-sm py-xs text-body-auxiliary h-8': size === 'sm',\n          'px-md py-sm text-body-paragraph h-10': size === 'md',\n          'px-lg py-md text-heading-h4 h-12': size === 'lg'\n        },\n        \n        // Estados\n        disabled && 'opacity-60 cursor-not-allowed pointer-events-none',\n        loading && 'pointer-events-none',\n        isPressed && 'scale-95',\n        glowEffect && !disabled && 'shadow-lexia',\n        \n        className\n      )}\n      disabled={disabled || loading}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      {/* Contenido */}\n      <span className={cn('relative z-10 flex items-center gap-sm', loading && 'opacity-0')}>\n        {children}\n      </span>\n\n      {/* Loading spinner */}\n      {loading && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n        </div>\n      )}\n\n      {/* Efectos ripple */}\n      {ripples.map((ripple) => (\n        <span\n          key={ripple.id}\n          className=\"absolute bg-current opacity-30 rounded-full pointer-events-none animate-ping\"\n          style={{\n            left: ripple.x,\n            top: ripple.y,\n            width: ripple.size,\n            height: ripple.size,\n            animationDuration: '0.6s'\n          }}\n        />\n      ))}\n    </button>\n  );\n});\n\nInteractiveButton.displayName = 'InteractiveButton';\n\n/**\n * Componente de card con hover elevado y micro-animaciones\n */\nexport const AnimatedCard = ({ \n  children,\n  hoverable = true,\n  clickable = false,\n  selected = false,\n  loading = false,\n  onClick,\n  className = '',\n  ...props\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [ref, isVisible] = useScrollReveal(0.1);\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        // Estilos base\n        'bg-bg-canvas rounded-lg border border-border-default',\n        'transition-all duration-300 ease-out',\n        \n        // Animación de entrada\n        isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4',\n        \n        // Estados interactivos\n        hoverable && [\n          'hover:shadow-lg hover:-translate-y-1',\n          isHovered && 'scale-[1.02]'\n        ],\n        \n        clickable && 'cursor-pointer hover:border-interactive-hover',\n        selected && 'border-interactive-default bg-yellow-50 shadow-lexia',\n        loading && 'pointer-events-none',\n        \n        className\n      )}\n      onClick={onClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      {...props}\n    >\n      {/* Loading overlay */}\n      {loading && (\n        <div className=\"absolute inset-0 bg-bg-canvas bg-opacity-80 flex items-center justify-center rounded-lg z-10\">\n          <div className=\"w-6 h-6 border-2 border-interactive-default border-t-transparent rounded-full animate-spin\" />\n        </div>\n      )}\n      \n      {children}\n    </div>\n  );\n};\n\n/**\n * Componente de input con animaciones de focus\n */\nexport const AnimatedInput = React.forwardRef(({ \n  label,\n  error,\n  success,\n  icon,\n  className = '',\n  ...props\n}, ref) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasValue, setHasValue] = useState(false);\n\n  const handleFocus = () => setIsFocused(true);\n  const handleBlur = (e) => {\n    setIsFocused(false);\n    setHasValue(e.target.value.length > 0);\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Label flotante */}\n      {label && (\n        <label className={cn(\n          'absolute left-md pointer-events-none transition-all duration-200 ease-out',\n          'text-text-secondary',\n          (isFocused || hasValue) ? [\n            'top-xs text-body-auxiliary transform -translate-y-full',\n            isFocused && 'text-interactive-default'\n          ] : 'top-1/2 transform -translate-y-1/2 text-body-paragraph'\n        )}>\n          {label}\n        </label>\n      )}\n\n      {/* Input */}\n      <input\n        ref={ref}\n        className={cn(\n          'w-full px-md py-sm border rounded-md transition-all duration-200 ease-out',\n          'bg-bg-canvas text-text-primary placeholder-text-secondary',\n          'focus:outline-none focus:ring-2 focus:ring-interactive-default focus:ring-opacity-50',\n          \n          // Estados de validación\n          error && 'border-feedback-error focus:border-feedback-error focus:ring-feedback-error',\n          success && 'border-feedback-success focus:border-feedback-success focus:ring-feedback-success',\n          !error && !success && 'border-border-default focus:border-interactive-default',\n          \n          // Espaciado para label flotante\n          label && 'pt-lg',\n          icon && 'pl-xl',\n          \n          className\n        )}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        {...props}\n      />\n\n      {/* Icono */}\n      {icon && (\n        <div className=\"absolute left-md top-1/2 transform -translate-y-1/2 text-text-secondary\">\n          {icon}\n        </div>\n      )}\n\n      {/* Mensaje de error/éxito */}\n      {(error || success) && (\n        <div className={cn(\n          'mt-xs text-body-auxiliary transition-all duration-200',\n          error && 'text-feedback-error',\n          success && 'text-feedback-success'\n        )}>\n          {error || success}\n        </div>\n      )}\n    </div>\n  );\n});\n\nAnimatedInput.displayName = 'AnimatedInput';\n\n/**\n * Hook para efectos de parallax suave\n */\nexport const useParallax = (strength = 0.5) => {\n  const [offset, setOffset] = useState(0);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (!ref.current) return;\n      \n      const rect = ref.current.getBoundingClientRect();\n      const scrollTop = window.pageYOffset;\n      const rate = scrollTop * -strength;\n      \n      setOffset(rate);\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [strength]);\n\n  return [ref, offset];\n};\n\n/**\n * Componente de progreso con animaciones fluidas\n */\nexport const AnimatedProgress = ({ \n  value = 0,\n  max = 100,\n  size = 'md',\n  variant = 'primary',\n  showLabel = true,\n  animated = true,\n  className = '',\n  ...props\n}) => {\n  const [displayValue, setDisplayValue] = useState(0);\n  const percentage = Math.min(100, Math.max(0, (value / max) * 100));\n\n  // Animar el valor\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDisplayValue(percentage);\n    }, 100);\n    return () => clearTimeout(timer);\n  }, [percentage]);\n\n  const sizeClasses = {\n    sm: 'h-1',\n    md: 'h-2',\n    lg: 'h-3'\n  };\n\n  const variantClasses = {\n    primary: 'bg-interactive-default',\n    success: 'bg-feedback-success',\n    warning: 'bg-feedback-warning',\n    error: 'bg-feedback-error'\n  };\n\n  return (\n    <div className={cn('w-full', className)} {...props}>\n      {showLabel && (\n        <div className=\"flex justify-between text-body-auxiliary text-text-secondary mb-xs\">\n          <span>Progreso</span>\n          <span>{Math.round(displayValue)}%</span>\n        </div>\n      )}\n      \n      <div className={cn(\n        'w-full bg-bg-light rounded-full overflow-hidden',\n        sizeClasses[size]\n      )}>\n        <div \n          className={cn(\n            'h-full rounded-full transition-all duration-500 ease-out',\n            variantClasses[variant],\n            animated && 'relative'\n          )}\n          style={{ width: `${displayValue}%` }}\n        >\n          {animated && displayValue > 0 && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white via-opacity-30 to-transparent animate-shimmer\" />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Utilidades de animación\n */\nexport const AnimationUtils = {\n  // Delay escalonado para listas\n  staggerDelay: (index, baseDelay = 100) => ({ \n    animationDelay: `${index * baseDelay}ms` \n  }),\n  \n  // Bounce suave\n  bounce: 'animate-bounce',\n  \n  // Pulse sutil\n  pulse: 'animate-pulse-subtle',\n  \n  // Shimmer effect\n  shimmer: 'animate-shimmer',\n  \n  // Fade in\n  fadeIn: 'animate-in fade-in duration-300',\n  \n  // Slide up\n  slideUp: 'animate-in slide-in-from-bottom-4 duration-300',\n  \n  // Scale in\n  scaleIn: 'animate-in zoom-in-95 duration-300'\n};