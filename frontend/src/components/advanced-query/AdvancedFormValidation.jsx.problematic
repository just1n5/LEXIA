// src/components/advanced-query/AdvancedFormValidation.jsx
import React, { useState, useEffect } from 'react'
import { 
  CheckCircle, AlertCircle, Info, Loader2,
  Eye, EyeOff, Shield, Zap
} from 'lucide-react'
import { cn } from '../../utils/cn'

/**
 * üîç AdvancedFormValidation - Validaciones en tiempo real
 * 
 * Proporciona validaci√≥n avanzada con feedback inmediato,
 * sugerencias contextuales y verificaci√≥n de formato.
 */
const AdvancedFormValidation = ({ 
  value, 
  fieldType, 
  onValidation,
  className = '',
  showStrength = false,
  ...props 
}) => {
  const [validation, setValidation] = useState({
    isValid: true,
    errors: [],
    warnings: [],
    suggestions: [],
    strength: 'medium'
  })
  const [isValidating, setIsValidating] = useState(false)

  // Reglas de validaci√≥n por tipo de campo
  const validationRules = {
    numeroRadicado: {
      pattern: /^\d{11,23}$/,
      minLength: 11,
      maxLength: 23,
      format: 'Debe contener entre 11 y 23 d√≠gitos',
      example: '11001310300120240001'
    },
    numeroRadicacion: {
      pattern: /^\d{4,20}$/,
      minLength: 4,
      maxLength: 20,
      format: 'Debe contener entre 4 y 20 d√≠gitos',
      example: '20240001'
    },
    nombrePersona: {
      pattern: /^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë\s]{2,100}$/,
      minLength: 2,
      maxLength: 100,
      format: 'Solo letras y espacios, entre 2 y 100 caracteres',
      example: 'Juan Carlos P√©rez'
    },
    email: {
      pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
      format: 'Formato de email v√°lido',
      example: 'usuario@ejemplo.com'
    }
  }

  // Funci√≥n principal de validaci√≥n
  const validateField = (inputValue) => {
    if (!inputValue || inputValue.trim() === '') {
      return {
        isValid: true,
        errors: [],
        warnings: [],
        suggestions: [],
        strength: 'medium'
      }
    }

    const rules = validationRules[fieldType]
    if (!rules) {
      return {
        isValid: true,
        errors: [],
        warnings: [],
        suggestions: [],
        strength: 'medium'
      }
    }

    const errors = []
    const warnings = []
    const suggestions = []
    let strength = 'medium'

    // Validar longitud
    if (inputValue.length < rules.minLength) {
      errors.push(`Debe tener al menos ${rules.minLength} caracteres`)
      strength = 'weak'
    } else if (inputValue.length > rules.maxLength) {
      errors.push(`No puede exceder ${rules.maxLength} caracteres`)
      strength = 'weak'
    }

    // Validar patr√≥n
    if (!rules.pattern.test(inputValue)) {
      errors.push(rules.format)
      strength = 'weak'
    }

    // Validaciones espec√≠ficas por tipo
    switch (fieldType) {
      case 'numeroRadicado':
        validateNumeroRadicado(inputValue, errors, warnings, suggestions)
        break
      case 'numeroRadicacion':
        validateNumeroRadicacion(inputValue, errors, warnings, suggestions)
        break
      case 'nombrePersona':
        validateNombrePersona(inputValue, errors, warnings, suggestions)
        break
      case 'email':
        validateEmail(inputValue, errors, warnings, suggestions)
        break
    }

    // Determinar fortaleza si no hay errores
    if (errors.length === 0) {
      if (warnings.length === 0 && suggestions.length === 0) {
        strength = 'strong'
      } else if (warnings.length > 0) {
        strength = 'medium'
      }
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings,
      suggestions,
      strength
    }
  }

  // Validaciones espec√≠ficas para n√∫mero de radicado
  const validateNumeroRadicado = (value, errors, warnings, suggestions) => {
    // Verificar estructura t√≠pica de radicado
    if (value.length >= 11) {
      const year = value.substring(5, 9)
      const currentYear = new Date().getFullYear()
      
      if (parseInt(year) < 1990 || parseInt(year) > currentYear + 1) {
        warnings.push('El a√±o en el radicado parece inusual')
      }
      
      // Verificar c√≥digo de juzgado (primeros 5 d√≠gitos)
      const codigoJuzgado = value.substring(0, 5)
      if (codigoJuzgado === '11001') {
        suggestions.push('‚úì Radicado de Bogot√° D.C. identificado')
      }
    }

    if (value.length > 15 && value.length < 20) {
      suggestions.push('Formato de radicado t√≠pico detectado')
    }
  }

  // Validaciones para n√∫mero de radicaci√≥n
  const validateNumeroRadicacion = (value, errors, warnings, suggestions) => {
    if (value.length >= 4) {
      const firstDigits = value.substring(0, 4)
      const currentYear = new Date().getFullYear()
      
      if (parseInt(firstDigits) >= 2000 && parseInt(firstDigits) <= currentYear) {
        suggestions.push('‚úì A√±o de radicaci√≥n v√°lido')
      } else if (parseInt(firstDigits) > currentYear) {
        warnings.push('El a√±o parece ser futuro')
      }
    }
  }

  // Validaciones para nombres de persona
  const validateNombrePersona = (value, errors, warnings, suggestions) => {
    // Verificar si tiene al menos nombre y apellido
    const words = value.trim().split(/\s+/)
    
    if (words.length < 2) {
      warnings.push('Se recomienda incluir nombre y apellido completos')
    } else if (words.length >= 2) {
      suggestions.push('‚úì Nombre completo detectado')
    }

    // Verificar capitalizaci√≥n
    const isProperCase = words.every(word => 
      word.charAt(0) === word.charAt(0).toUpperCase()
    )
    
    if (!isProperCase) {
      suggestions.push('Considera usar la primera letra en may√∫scula')
    }

    // Verificar caracteres especiales comunes
    if (value.includes('.') || value.includes(',')) {
      warnings.push('Evita usar puntos o comas en nombres')
    }
  }

  // Validaciones para email
  const validateEmail = (value, errors, warnings, suggestions) => {
    const commonDomains = ['gmail.com', 'hotmail.com', 'yahoo.com', 'outlook.com']
    const domain = value.split('@')[1]
    
    if (commonDomains.includes(domain)) {
      suggestions.push('‚úì Dominio de email reconocido')
    }
    
    if (value.includes('..')) {
      errors.push('No puede contener puntos consecutivos')
    }
  }

  // Efecto para validar cuando cambia el valor
  useEffect(() => {
    if (value) {
      setIsValidating(true)
      
      // Simular delay de validaci√≥n as√≠ncrona
      const timeoutId = setTimeout(() => {
        const result = validateField(value)
        setValidation(result)
        setIsValidating(false)
        onValidation?.(result)
      }, 300)
      
      return () => clearTimeout(timeoutId)
    } else {
      const emptyResult = {
        isValid: true,
        errors: [],
        warnings: [],
        suggestions: [],
        strength: 'medium'
      }
      setValidation(emptyResult)
      onValidation?.(emptyResult)
    }
  }, [value, fieldType])

  // No renderizar si no hay valor
  if (!value || value.trim() === '') {
    return null
  }

  const hasMessages = validation.errors.length > 0 || 
                    validation.warnings.length > 0 || 
                    validation.suggestions.length > 0

  if (!hasMessages && !showStrength) {
    return null
  }

  return (
    <div className={cn('mt-xs space-y-xs', className)} {...props}>
      {/* Indicador de validaci√≥n en tiempo real */}
      {isValidating && (
        <div className="flex items-center gap-xs text-body-auxiliary text-text-secondary">
          <Loader2 className="w-3 h-3 animate-spin" />
          <span>Validando...</span>
        </div>
      )}

      {/* Mensajes de error */}
      {validation.errors.map((error, index) => (
        <div key={`error-${index}`} className="flex items-start gap-xs">
          <AlertCircle className="w-3 h-3 text-feedback-error mt-px" />
          <span className="text-body-auxiliary text-feedback-error">
            {error}
          </span>
        </div>
      ))}

      {/* Mensajes de advertencia */}
      {validation.warnings.map((warning, index) => (
        <div key={`warning-${index}`} className="flex items-start gap-xs">
          <AlertCircle className="w-3 h-3 text-feedback-warning mt-px" />
          <span className="text-body-auxiliary text-feedback-warning">
            {warning}
          </span>
        </div>
      ))}

      {/* Sugerencias */}
      {validation.suggestions.map((suggestion, index) => (
        <div key={`suggestion-${index}`} className="flex items-start gap-xs">
          <Info className="w-3 h-3 text-feedback-info mt-px" />
          <span className="text-body-auxiliary text-feedback-info">
            {suggestion}
          </span>
        </div>
      ))}

      {/* Indicador de fortaleza (para campos cr√≠ticos) */}
      {showStrength && validation.isValid && (
        <div className="flex items-center gap-xs">
          <div className="flex gap-xs">
            <div className={cn(
              'w-2 h-1 rounded-full',
              validation.strength === 'weak' ? 'bg-feedback-error' : 'bg-feedback-success'
            )} />
            <div className={cn(
              'w-2 h-1 rounded-full',
              validation.strength === 'medium' || validation.strength === 'strong' 
                ? 'bg-feedback-success' 
                : 'bg-border-default'
            )} />
            <div className={cn(
              'w-2 h-1 rounded-full',
              validation.strength === 'strong' ? 'bg-feedback-success' : 'bg-border-default'
            )} />
          </div>
          <span className={cn(
            'text-body-auxiliary',
            validation.strength === 'weak' && 'text-feedback-error',
            validation.strength === 'medium' && 'text-feedback-warning',
            validation.strength === 'strong' && 'text-feedback-success'
          )}>
            {validation.strength === 'weak' && 'Informaci√≥n b√°sica'}
            {validation.strength === 'medium' && 'Informaci√≥n buena'}
            {validation.strength === 'strong' && 'Informaci√≥n excelente'}
          </span>
        </div>
      )}

      {/* Ejemplo de formato correcto */}
      {validation.errors.length > 0 && validationRules[fieldType] && (
        <div className="bg-feedback-info-light rounded p-sm border border-feedback-info">
          <div className="flex items-start gap-xs">
            <Info className="w-3 h-3 text-feedback-info mt-px" />
            <div>
              <span className="text-body-auxiliary text-feedback-info font-medium">
                Ejemplo correcto:
              </span>
              <span className="text-body-auxiliary text-feedback-info ml-xs font-mono">
                {validationRules[fieldType].example}
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

AdvancedFormValidation.displayName = 'AdvancedFormValidation'

export default AdvancedFormValidation