import React, { useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Upload, \n  File, \n  X, \n  CheckCircle, \n  AlertCircle, \n  ArrowLeft, \n  ChevronRight, \n  Download,\n  FileSpreadsheet,\n  Info,\n  Eye,\n  Zap,\n  Clock,\n  Settings,\n  Target\n} from 'lucide-react';\nimport * as XLSX from 'xlsx';\n\n// Hooks\nimport { useExcelProcessor } from '../../hooks/useExcelProcessor';\nimport { useBulkUploadState } from '../../hooks/useBulkUploadState';\nimport { useBulkUploadToast } from '../../components/ui/ToastEnhanced';\nimport { useMobileDetection } from '../../hooks/useMobileDetection';\nimport { useFloatingIndicators, BulkUploadIndicators } from '../../components/bulk-upload/FloatingStatusIndicator';\nimport { useStepper } from '../../components/bulk-upload/AdvancedStepper';\nimport { useStaggeredAnimation, useScrollReveal } from '../../components/bulk-upload/MicroInteractions';\n\n// Componentes Base\nimport Button from '../../components/ui/Button';\nimport Card from '../../components/ui/Card';\n\n// Componentes Avanzados Fase 2\nimport {\n  FilePreview,\n  ValidationProgress,\n  EnhancedDropZone,\n  MobileOptimizedDropZone,\n  MobileBulkUploadLayout,\n  AdvancedStepper,\n  FloatingStatusIndicator,\n  InteractiveButton,\n  AnimatedCard,\n  AnimatedProgress,\n  AnimationUtils\n} from '../../components/bulk-upload';\n\nconst BulkUploadPagePremium = () => {\n  const [dragActive, setDragActive] = useState(false);\n  const fileInputRef = useRef(null);\n  const navigate = useNavigate();\n\n  // Hooks principales\n  const {\n    uploadedFile,\n    uploadStatus,\n    validationResults,\n    previewData,\n    setUploadedFile,\n    setUploadStatus,\n    setValidationResults,\n    setPreviewData,\n    clearState,\n    persistState,\n    restoreState\n  } = useBulkUploadState();\n\n  const {\n    processFile,\n    processing,\n    progress,\n    currentStep,\n    error: processingError\n  } = useExcelProcessor();\n\n  // \ud83c\udd95 FASE 2: Hooks avanzados\n  const bulkToast = useBulkUploadToast();\n  const { isMobile, isTablet, screenSize } = useMobileDetection();\n  const { indicators, addIndicator, updateIndicator, removeIndicator } = useFloatingIndicators();\n  \n  // Stepper para mostrar progreso del proceso\n  const stepperSteps = [\n    { \n      label: 'Seleccionar Archivo', \n      description: 'Elige un archivo Excel válido',\n      icon: <Upload size={16} />\n    },\n    { \n      label: 'Validar Datos', \n      description: 'Procesamiento y validación',\n      icon: <Zap size={16} />\n    },\n    { \n      label: 'Revisar Resultados', \n      description: 'Vista previa de datos válidos',\n      icon: <Eye size={16} />\n    },\n    { \n      label: 'Configurar', \n      description: 'Configurar opciones de consulta',\n      icon: <Settings size={16} />\n    }\n  ];\n\n  const {\n    currentStep: stepperCurrentStep,\n    completedSteps,\n    nextStep: stepperNext,\n    completeStep,\n    setStepError,\n    progress: stepperProgress\n  } = useStepper(stepperSteps.length, 0);\n\n  // Animaciones escalonadas para elementos\n  const [headerRef, headerVisible] = useScrollReveal(0.1);\n  const [instructionsRef, instructionsVisible] = useScrollReveal(0.1);\n  const visibleCards = useStaggeredAnimation([1, 2, 3], 150);\n\n  // Restaurar estado al cargar\n  React.useEffect(() => {\n    restoreState();\n    \n    // Actualizar stepper basado en estado actual\n    if (uploadStatus === 'success' && validationResults) {\n      completeStep(0); // Archivo seleccionado\n      completeStep(1); // Datos validados\n    }\n  }, []);\n\n  const handleBack = () => {\n    navigate('/solicitudes/select-type');\n  };\n\n  const handleFileSelect = async (file) => {\n    // Validaciones\n    const allowedTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-excel'\n    ];\n    \n    const allowedExtensions = ['.xlsx', '.xls'];\n    const fileExtension = file.name.toLowerCase().slice(file.name.lastIndexOf('.'));\n    \n    if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {\n      setUploadStatus('error');\n      setValidationResults({ error: 'Formato de archivo no soportado' });\n      setStepError(0, 'Formato no válido');\n      \n      // \ud83c\udd95 FASE 2: Floating indicator + toast\n      addIndicator(BulkUploadIndicators.fileError(file.name, 'Formato no soportado'));\n      bulkToast.notifyFileError(file.name, 'Formato no soportado');\n      return;\n    }\n\n    const maxSize = 10 * 1024 * 1024;\n    if (file.size > maxSize) {\n      setUploadStatus('error');\n      setValidationResults({ error: 'Archivo demasiado grande (máx. 10MB)' });\n      setStepError(0, 'Archivo muy grande');\n      \n      addIndicator(BulkUploadIndicators.fileError(file.name, 'Archivo demasiado grande'));\n      bulkToast.notifyFileError(file.name, 'Archivo demasiado grande (máx. 10MB)');\n      return;\n    }\n\n    setUploadedFile(file);\n    setUploadStatus('uploading');\n    \n    // \ud83c\udd95 FASE 2: Feedback premium\n    completeStep(0); // Completar paso 1\n    bulkToast.notifyFileUploaded(file.name);\n    \n    // Floating indicator para procesamiento\n    const processIndicatorId = addIndicator({\n      ...BulkUploadIndicators.fileProcessing(file.name, 0),\n      persistent: true\n    });\n    \n    try {\n      const result = await processFile(file);\n      \n      // Actualizar indicador con progreso\n      updateIndicator(processIndicatorId, {\n        progress: 100,\n        status: 'success',\n        title: 'Archivo procesado',\n        message: `${result.validation.validRows} registros válidos`\n      });\n      \n      setValidationResults(result.validation);\n      setPreviewData(result.preview);\n      setUploadStatus('success');\n      persistState();\n      \n      // Completar pasos del stepper\n      completeStep(1); // Validación completa\n      completeStep(2); // Resultados listos\n      \n      // Toast final\n      bulkToast.notifyFileProcessed(result.validation.validRows, result.validation.totalRows);\n      \n      // Remover indicator después de un tiempo\n      setTimeout(() => removeIndicator(processIndicatorId), 3000);\n      \n    } catch (error) {\n      console.error('Error procesando archivo:', error);\n      setUploadStatus('error');\n      setValidationResults({ error: error.message });\n      setStepError(1, 'Error en procesamiento');\n      \n      // Error feedback\n      updateIndicator(processIndicatorId, {\n        status: 'error',\n        title: 'Error procesando archivo',\n        message: error.message,\n        persistent: false\n      });\n      \n      bulkToast.notifyFileError(file.name, error.message);\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFileSelect(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleFileInput = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      handleFileSelect(e.target.files[0]);\n    }\n  };\n\n  const removeFile = () => {\n    clearState();\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleProcessFile = () => {\n    completeStep(3); // Configuración lista\n    navigate('/solicitudes/bulk-confirm', { \n      state: { \n        file: uploadedFile, \n        validation: validationResults,\n        preview: previewData\n      }\n    });\n  };\n\n  const downloadTemplate = () => {\n    const templateData = [\n      ['Numero_Radicado', 'Descripcion'],\n      ['11001310300120240001', 'Consulta de estado procesal ejemplo'],\n      ['11001310300120240002', 'Verificación de actuaciones'],\n      ['', '']\n    ];\n    \n    const ws = XLSX.utils.aoa_to_sheet(templateData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'Template');\n    \n    const headerStyle = {\n      font: { bold: true, color: { rgb: \"FFFFFF\" } },\n      fill: { fgColor: { rgb: \"FACC15\" } },\n      alignment: { horizontal: \"center\" }\n    };\n    \n    ws['A1'].s = headerStyle;\n    ws['B1'].s = headerStyle;\n    \n    XLSX.writeFile(wb, 'template-carga-masiva-consultas.xlsx');\n    bulkToast.notifyTemplateDownloaded();\n  };\n\n  // Determinar qué DropZone usar\n  const DropZoneComponent = isMobile ? MobileOptimizedDropZone : EnhancedDropZone;\n\n  return (\n    <MobileBulkUploadLayout>\n      {/* Header Adaptativo */}\n      <MobileBulkUploadLayout.Header\n        onBack={handleBack}\n        title=\"Carga Masiva de Consultas\"\n        subtitle=\"Sube un archivo de Excel con los números de radicado para crear múltiples consultas automáticamente\"\n        breadcrumb={\n          <>\n            <Button.Link onClick={() => navigate('/dashboard')} className=\"text-body-auxiliary\">\n              Mis Solicitudes\n            </Button.Link>\n            <ChevronRight size={14} className=\"mx-xs text-border-default\" />\n            <Button.Link onClick={handleBack} className=\"text-body-auxiliary\">\n              Nueva Solicitud\n            </Button.Link>\n            <ChevronRight size={14} className=\"mx-xs text-border-default\" />\n            <span className=\"text-text-primary\">Carga Masiva</span>\n          </>\n        }\n      />\n\n      {/* Main Content */}\n      <MobileBulkUploadLayout.Main maxWidth=\"6xl\">\n        {/* Page Header con animación */}\n        <div \n          ref={headerRef}\n          className={`text-center mb-xl transition-all duration-700 ${\n            headerVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'\n          }`}\n        >\n          {!isMobile && (\n            <div className=\"w-16 h-16 bg-interactive-default rounded-lg flex items-center justify-center mx-auto mb-md animate-bounce\">\n              <Upload size={32} className=\"text-text-primary\" />\n            </div>\n          )}\n          \n          {/* Stepper de progreso */}\n          <div className=\"mb-lg\">\n            <AdvancedStepper\n              steps={stepperSteps}\n              currentStep={stepperCurrentStep}\n              completed={completedSteps}\n              orientation={isMobile ? 'vertical' : 'horizontal'}\n              showLabels={!isMobile}\n              showDescription={false}\n              className=\"max-w-4xl mx-auto\"\n            />\n          </div>\n          \n          {/* Progress bar general */}\n          {stepperProgress > 0 && (\n            <div className=\"max-w-md mx-auto mb-lg\">\n              <AnimatedProgress \n                value={stepperProgress} \n                variant=\"primary\"\n                animated\n                showLabel={false}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Grid Responsivo */}\n        <MobileBulkUploadLayout.Grid\n          sidebarSize=\"1\"\n          mainSize=\"2\"\n          sidebar={\n            /* Sidebar - Instructions */\n            <div \n              ref={instructionsRef}\n              className={`space-y-lg transition-all duration-700 delay-200 ${\n                instructionsVisible ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-4'\n              }`}\n            >\n              {/* Instructions Card */}\n              <AnimatedCard \n                hoverable\n                className={`${\n                  visibleCards.includes(0) ? AnimationUtils.fadeIn : 'opacity-0'\n                }`}\n                style={AnimationUtils.staggerDelay(0)}\n              >\n                <MobileBulkUploadLayout.Card variant=\"info\" size=\"lg\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <Info size={20} className=\"text-feedback-info\" />\n                    <h2 className=\"text-heading-h3 font-heading text-text-primary\">Requisitos del Archivo</h2>\n                  </div>\n                  \n                  <div className=\"space-y-md\">\n                    <div>\n                      <h4 className=\"text-heading-h4 font-heading text-text-primary mb-sm\">\n                        Formatos Permitidos\n                      </h4>\n                      <div className=\"space-y-xs\">\n                        <div className=\"flex items-center gap-sm text-body-paragraph\">\n                          <FileSpreadsheet size={16} className=\"text-feedback-success\" />\n                          <span>Excel 2007+ (.xlsx)</span>\n                        </div>\n                        <div className=\"flex items-center gap-sm text-body-paragraph\">\n                          <FileSpreadsheet size={16} className=\"text-feedback-success\" />\n                          <span>Excel 97-2003 (.xls)</span>\n                        </div>\n                      </div>\n                      <div className=\"mt-sm p-sm bg-feedback-warning-light border border-feedback-warning rounded-md\">\n                        <p className=\"text-body-auxiliary text-feedback-warning\">\n                          ⚠️ Por seguridad, no se permiten archivos con macros (.xlsm)\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-heading-h4 font-heading text-text-primary mb-sm\">\n                        Estructura Requerida\n                      </h4>\n                      <div className=\"space-y-xs text-body-paragraph text-text-base\">\n                        <div>• <strong>Columna A:</strong> Numero_Radicado</div>\n                        <div>• <strong>Columna B:</strong> Descripcion (opcional)</div>\n                        <div>• <strong>Primera fila:</strong> Encabezados</div>\n                        <div>• <strong>Límites:</strong> Máximo 1000 registros</div>\n                        <div>• <strong>Tamaño:</strong> Máximo 10MB</div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-md\">\n                    <InteractiveButton\n                      variant=\"secondary\"\n                      icon={<Download size={16} />}\n                      onClick={downloadTemplate}\n                      className=\"w-full\"\n                      rippleEffect\n                      hapticFeedback\n                    >\n                      Descargar Plantilla\n                    </InteractiveButton>\n                  </div>\n                </MobileBulkUploadLayout.Card>\n              </AnimatedCard>\n\n              {/* Progress Card durante procesamiento */}\n              {processing && (\n                <AnimatedCard className={visibleCards.includes(1) ? AnimationUtils.slideUp : 'opacity-0'}>\n                  <MobileBulkUploadLayout.Card variant=\"info\" size=\"lg\">\n                    <div className=\"flex items-center gap-sm mb-md\">\n                      <Zap size={20} className=\"text-feedback-info animate-pulse\" />\n                      <h3 className=\"text-heading-h3 font-heading text-text-primary\">Procesando Archivo</h3>\n                    </div>\n                    <ValidationProgress \n                      progress={progress}\n                      currentStep={currentStep}\n                      status={processing ? 'processing' : 'success'}\n                    />\n                  </MobileBulkUploadLayout.Card>\n                </AnimatedCard>\n              )}\n            </div>\n          }\n          main={\n            /* Main Content Area */\n            <div className=\"space-y-xl\">\n              {/* Upload Area */}\n              <AnimatedCard \n                className={visibleCards.includes(2) ? AnimationUtils.scaleIn : 'opacity-0'}\n                style={AnimationUtils.staggerDelay(2, 150)}\n              >\n                <MobileBulkUploadLayout.Card size=\"xl\">\n                  {!uploadedFile ? (\n                    <DropZoneComponent\n                      dragActive={dragActive}\n                      onDrop={handleDrop}\n                      onDrag={handleDrag}\n                      onFileSelect={() => fileInputRef.current?.click()}\n                      disabled={processing}\n                    />\n                  ) : (\n                    <div className=\"space-y-lg\">\n                      {/* File Info */}\n                      <AnimatedCard hoverable className=\"border border-border-default p-md bg-bg-light\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-md\">\n                            <div className=\"w-12 h-12 bg-feedback-success rounded-lg flex items-center justify-center\">\n                              <File size={24} className=\"text-bg-canvas\" />\n                            </div>\n                            <div>\n                              <h4 className=\"text-body-paragraph font-medium text-text-primary\">\n                                {uploadedFile.name}\n                              </h4>\n                              <div className=\"flex items-center gap-md text-body-auxiliary text-text-secondary\">\n                                <span>{(uploadedFile.size / 1024 / 1024).toFixed(2)} MB</span>\n                                <span>•</span>\n                                <span>\n                                  {uploadedFile.name.toLowerCase().endsWith('.xlsx') ? 'Excel 2007+' : 'Excel 97-2003'}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          <InteractiveButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            icon={<X size={16} />}\n                            onClick={removeFile}\n                            disabled={processing}\n                            rippleEffect\n                          />\n                        </div>\n                      </AnimatedCard>\n\n                      {/* Upload Status */}\n                      {uploadStatus === 'uploading' && (\n                        <div className=\"text-center py-lg\">\n                          <div className=\"w-8 h-8 border-2 border-interactive-default border-t-transparent rounded-full animate-spin mx-auto mb-md\"></div>\n                          <p className=\"text-body-paragraph text-text-base\">\n                            {processing ? currentStep : 'Iniciando validación...'}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Success Results */}\n                      {uploadStatus === 'success' && validationResults && (\n                        <div className=\"space-y-lg\">\n                          <div className=\"flex items-center gap-sm text-feedback-success\">\n                            <CheckCircle size={20} />\n                            <span className=\"text-body-paragraph font-medium\">\n                              Archivo procesado correctamente\n                            </span>\n                          </div>\n                          \n                          {/* Validation Results Summary */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n                            {[\n                              { label: 'Total de registros', value: validationResults.totalRows, variant: 'success' },\n                              { label: 'Registros válidos', value: validationResults.validRows, variant: 'success' },\n                              { label: 'Con errores', value: validationResults.invalidRows || 0, variant: 'warning' }\n                            ].map((stat, index) => (\n                              <AnimatedCard \n                                key={index}\n                                className={`text-center p-md bg-feedback-${stat.variant}-light border border-feedback-${stat.variant} rounded-lg`}\n                                style={AnimationUtils.staggerDelay(index, 100)}\n                              >\n                                <div className={`text-heading-h2 font-heading text-feedback-${stat.variant}`}>\n                                  {stat.value}\n                                </div>\n                                <div className=\"text-body-auxiliary text-text-secondary\">\n                                  {stat.label}\n                                </div>\n                              </AnimatedCard>\n                            ))}\n                          </div>\n\n                          {/* File Preview */}\n                          {previewData && previewData.length > 0 && (\n                            <AnimatedCard>\n                              <MobileBulkUploadLayout.Card variant=\"outlined\" size=\"lg\">\n                                <div className=\"flex items-center gap-sm mb-md\">\n                                  <Eye size={20} className=\"text-interactive-default\" />\n                                  <h3 className=\"text-heading-h3 font-heading text-text-primary\">Vista Previa de Datos</h3>\n                                </div>\n                                <FilePreview data={previewData} validation={validationResults} />\n                              </MobileBulkUploadLayout.Card>\n                            </AnimatedCard>\n                          )}\n\n                          {/* Errors Detail */}\n                          {validationResults.errors && validationResults.errors.length > 0 && (\n                            <AnimatedCard>\n                              <MobileBulkUploadLayout.Card variant=\"warning\">\n                                <div className=\"flex items-center gap-sm mb-md\">\n                                  <AlertCircle size={20} className=\"text-feedback-warning\" />\n                                  <h4 className=\"text-heading-h4 font-heading text-text-primary\">Errores Encontrados</h4>\n                                </div>\n                                <div className=\"space-y-xs max-h-48 overflow-y-auto\">\n                                  {validationResults.errors.slice(0, 10).map((error, index) => (\n                                    <div key={index} className=\"flex justify-between text-body-auxiliary p-sm bg-feedback-warning-light rounded\">\n                                      <span>Fila {error.row}:</span>\n                                      <span className=\"text-feedback-warning font-medium\">{error.error}</span>\n                                    </div>\n                                  ))}\n                                  {validationResults.errors.length > 10 && (\n                                    <p className=\"text-body-auxiliary text-text-secondary text-center pt-sm\">\n                                      ... y {validationResults.errors.length - 10} errores más\n                                    </p>\n                                  )}\n                                </div>\n                                <p className=\"text-body-auxiliary text-text-secondary mt-sm\">\n                                  Los registros con errores serán omitidos del procesamiento.\n                                </p>\n                              </MobileBulkUploadLayout.Card>\n                            </AnimatedCard>\n                          )}\n                        </div>\n                      )}\n\n                      {/* Error State */}\n                      {uploadStatus === 'error' && (\n                        <div className=\"text-center py-lg\">\n                          <div className=\"w-12 h-12 bg-feedback-error rounded-lg flex items-center justify-center mx-auto mb-md\">\n                            <AlertCircle size={24} className=\"text-bg-canvas\" />\n                          </div>\n                          <h4 className=\"text-heading-h4 font-heading text-feedback-error mb-sm\">\n                            Error al procesar archivo\n                          </h4>\n                          <p className=\"text-body-paragraph text-text-secondary mb-md\">\n                            {validationResults?.error || processingError || 'Error desconocido'}\n                          </p>\n                          <InteractiveButton\n                            variant=\"secondary\"\n                            onClick={removeFile}\n                            rippleEffect\n                            hapticFeedback\n                          >\n                            Intentar de Nuevo\n                          </InteractiveButton>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {/* Hidden file input */}\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={handleFileInput}\n                    className=\"hidden\"\n                  />\n                </MobileBulkUploadLayout.Card>\n              </AnimatedCard>\n\n              {/* Action Buttons */}\n              <MobileBulkUploadLayout.ButtonGroup>\n                <InteractiveButton\n                  variant=\"secondary\"\n                  size=\"lg\"\n                  onClick={handleBack}\n                  disabled={processing}\n                  rippleEffect\n                >\n                  Volver\n                </InteractiveButton>\n                <InteractiveButton\n                  variant=\"primary\"\n                  size=\"lg\"\n                  onClick={handleProcessFile}\n                  disabled={uploadStatus !== 'success' || processing}\n                  loading={processing}\n                  icon={processing ? <Clock size={20} /> : <ChevronRight size={20} />}\n                  iconPosition=\"right\"\n                  glowEffect\n                  rippleEffect\n                  hapticFeedback\n                >\n                  {processing \n                    ? 'Procesando...' \n                    : validationResults?.validRows \n                      ? `Continuar con ${validationResults.validRows} consultas`\n                      : 'Procesar Archivo'\n                  }\n                </InteractiveButton>\n              </MobileBulkUploadLayout.ButtonGroup>\n            </div>\n          }\n        />\n      </MobileBulkUploadLayout.Main>\n\n      {/* Floating Status Indicators */}\n      <FloatingStatusIndicator.Container \n        indicators={indicators} \n        onRemove={removeIndicator} \n      />\n    </MobileBulkUploadLayout>\n  );\n};\n\nexport default BulkUploadPagePremium;